// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Northwind.EF.DAL.Context;

namespace Northwind.Migrations.Migrations
{
    [DbContext(typeof(NorthwindEFContext))]
    [Migration("20200324185712_Version1_1")]
    partial class Version1_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-preview.2.20120.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Northwind.EF.DAL.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CategoryID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .HasName("CategoryName");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Beverages",
                            Description = "Soft drinks, coffees, teas, beers, and ales"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Condiments",
                            Description = "Sweet and savory sauces, relishes, spreads, and seasonings"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Confections",
                            Description = "Desserts, candies, and sweet breads"
                        });
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CardExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("CustomerID")
                        .HasColumnType("nchar(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ContactTitle")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(24)")
                        .HasMaxLength(24);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(24)")
                        .HasMaxLength(24);

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("City")
                        .HasName("City");

                    b.HasIndex("CompanyName")
                        .HasName("CompanyName");

                    b.HasIndex("PostalCode")
                        .HasName("PostalCode");

                    b.HasIndex("Region")
                        .HasName("Region");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "ALFKI",
                            Address = "Obere Str. 57",
                            City = "Berlin",
                            CompanyName = "Alfreds Futterkiste",
                            ContactName = "Maria Anders",
                            ContactTitle = "Sales Representative",
                            Country = "Germany",
                            Fax = "030-0076545",
                            Phone = "030-0074321",
                            PostalCode = "12209"
                        },
                        new
                        {
                            Id = "ANATR",
                            Address = "Avda. de la Constitucion 2222",
                            City = "Mexico D.F.",
                            CompanyName = "Ana Trujillo Emparedados y helados",
                            ContactName = "Ana Trujillo",
                            ContactTitle = "Owner",
                            Country = "Mexico",
                            Fax = "(5) 555-3745",
                            Phone = "(5) 555-4729",
                            PostalCode = "05021"
                        },
                        new
                        {
                            Id = "ANTON",
                            Address = "Mataderos  2312",
                            City = "Mexico D.F.",
                            CompanyName = "Antonio Moreno Taqueria",
                            ContactName = "Antonio Moreno",
                            ContactTitle = "Owner",
                            Country = "Mexico",
                            Phone = "(5) 555-3932",
                            PostalCode = "05023"
                        },
                        new
                        {
                            Id = "AROUT",
                            Address = "120 Hanover Sq.",
                            City = "London",
                            CompanyName = "Around the Horn",
                            ContactName = "Thomas Hardy",
                            ContactTitle = "Sales Representative",
                            Country = "UK",
                            Fax = "(171) 555-6750",
                            Phone = "(171) 555-7788",
                            PostalCode = "WA1 1DP"
                        },
                        new
                        {
                            Id = "BERGS",
                            Address = "Berguvsvagen  8",
                            City = "Lulea",
                            CompanyName = "Berglunds snabbkop",
                            ContactName = "Christina Berglund",
                            ContactTitle = "Order Administrator",
                            Country = "Sweden",
                            Fax = "0921-12 34 67",
                            Phone = "0921-12 34 65",
                            PostalCode = "S-958 22"
                        });
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.CustomerCustomerDemo", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasColumnType("nchar(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5);

                    b.Property<string>("CustomerTypeId")
                        .HasColumnName("CustomerTypeID")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.HasKey("CustomerId", "CustomerTypeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("CustomerCustomerDemo");
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.CustomerDemographics", b =>
                {
                    b.Property<string>("CustomerTypeId")
                        .HasColumnName("CustomerTypeID")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("CustomerDesc")
                        .HasColumnType("ntext");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("CustomerTypeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("CustomerDemographics");
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmployeeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(24)")
                        .HasMaxLength(24);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int?>("ReportsTo")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("TitleOfCourtesy")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("EmployeeId");

                    b.HasIndex("LastName")
                        .HasName("LastName");

                    b.HasIndex("PostalCode")
                        .HasName("PostalCode");

                    b.HasIndex("ReportsTo");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Address = "507 - 20th Ave. E.Apt. 2A",
                            City = "Seattle",
                            Country = "USA",
                            Extension = "5467",
                            FirstName = "Nancy",
                            HomePhone = "(206) 555-9857",
                            LastName = "Davolio",
                            Notes = "Education includes a BA in psychology from Colorado State University in 1970.  She also completed The Art of the Cold Call.  Nancy is a member of Toastmasters International.",
                            PostalCode = "98122",
                            Region = "WA",
                            ReportsTo = 2,
                            Title = "Sales Representative",
                            TitleOfCourtesy = "Ms."
                        },
                        new
                        {
                            EmployeeId = 2,
                            Address = "908 W. Capital Way",
                            City = "Tacoma",
                            Country = "USA",
                            Extension = "3457",
                            FirstName = "Andrew",
                            HomePhone = "(206) 555-9482",
                            LastName = "Fuller",
                            Notes = "Andrew received his BTS commercial in 1974 and a Ph.D. in international marketing from the University of Dallas in 1981.  He is fluent in French and Italian and reads German.  He joined the company as a sales representative, was promoted to sales manager in January 1992 and to vice president of sales in March 1993.  Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.",
                            PostalCode = "98401",
                            Region = "WA",
                            Title = "Vice President, Sales",
                            TitleOfCourtesy = "Dr."
                        },
                        new
                        {
                            EmployeeId = 3,
                            Address = "722 Moss Bay Blvd.",
                            City = "Kirkland",
                            Country = "USA",
                            Extension = "3355",
                            FirstName = "Janet",
                            HomePhone = "(206) 555-3412",
                            LastName = "Leverling",
                            Notes = "Janet has a BS degree in chemistry from Boston College (1984).  She has also completed a certificate program in food retailing management.  Janet was hired as a sales associate in 1991 and promoted to sales representative in February 1992.",
                            PostalCode = "98033",
                            Region = "WA",
                            ReportsTo = 2,
                            Title = "Sales Representative",
                            TitleOfCourtesy = "Ms."
                        });
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.EmployeeTerritory", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnName("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("TerritoryId")
                        .HasColumnName("TerritoryID")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("EmployeeId", "TerritoryId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("TerritoryId");

                    b.ToTable("EmployeeTerritories");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            TerritoryId = "20852"
                        },
                        new
                        {
                            EmployeeId = 1,
                            TerritoryId = "27403"
                        },
                        new
                        {
                            EmployeeId = 2,
                            TerritoryId = "27511"
                        },
                        new
                        {
                            EmployeeId = 2,
                            TerritoryId = "29202"
                        },
                        new
                        {
                            EmployeeId = 2,
                            TerritoryId = "30346"
                        },
                        new
                        {
                            EmployeeId = 2,
                            TerritoryId = "31406"
                        },
                        new
                        {
                            EmployeeId = 2,
                            TerritoryId = "32859"
                        },
                        new
                        {
                            EmployeeId = 2,
                            TerritoryId = "33607"
                        },
                        new
                        {
                            EmployeeId = 2,
                            TerritoryId = "40222"
                        },
                        new
                        {
                            EmployeeId = 3,
                            TerritoryId = "45839"
                        },
                        new
                        {
                            EmployeeId = 3,
                            TerritoryId = "48075"
                        },
                        new
                        {
                            EmployeeId = 3,
                            TerritoryId = "48084"
                        },
                        new
                        {
                            EmployeeId = 3,
                            TerritoryId = "48304"
                        },
                        new
                        {
                            EmployeeId = 3,
                            TerritoryId = "53404"
                        },
                        new
                        {
                            EmployeeId = 3,
                            TerritoryId = "55113"
                        },
                        new
                        {
                            EmployeeId = 3,
                            TerritoryId = "55439"
                        });
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasColumnType("nchar(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5);

                    b.Property<int?>("EmployeeId")
                        .HasColumnName("EmployeeID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ShipAddress")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("ShipCity")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("ShipCountry")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("ShipName")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("ShipPostalCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ShipRegion")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int?>("ShipVia")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasName("CustomersOrders");

                    b.HasIndex("EmployeeId")
                        .HasName("EmployeesOrders");

                    b.HasIndex("OrderDate")
                        .HasName("OrderDate");

                    b.HasIndex("ShipPostalCode")
                        .HasName("ShipPostalCode");

                    b.HasIndex("ShipVia")
                        .HasName("ShippersOrders");

                    b.HasIndex("ShippedDate")
                        .HasName("ShippedDate");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 10835,
                            CustomerId = "ALFKI",
                            EmployeeId = 1,
                            Freight = 69.53m,
                            ShipAddress = "Obere Str. 57",
                            ShipCity = "Berlin",
                            ShipCountry = "Germany",
                            ShipName = "Alfred's Futterkiste",
                            ShipPostalCode = "12209",
                            ShipVia = 3
                        },
                        new
                        {
                            Id = 10952,
                            CustomerId = "ALFKI",
                            EmployeeId = 1,
                            Freight = 40.42m,
                            ShipAddress = "Obere Str. 57",
                            ShipCity = "Berlin",
                            ShipCountry = "Germany",
                            ShipName = "Alfred's Futterkiste",
                            ShipPostalCode = "12209",
                            ShipVia = 1
                        },
                        new
                        {
                            Id = 11011,
                            CustomerId = "ALFKI",
                            EmployeeId = 3,
                            Freight = 1.21m,
                            ShipAddress = "Obere Str. 57",
                            ShipCity = "Berlin",
                            ShipCountry = "Germany",
                            ShipName = "Alfred's Futterkiste",
                            ShipPostalCode = "12209",
                            ShipVia = 1
                        },
                        new
                        {
                            Id = 10625,
                            CustomerId = "ANATR",
                            EmployeeId = 3,
                            Freight = 43.90m,
                            ShipAddress = "Avda. de la Constitución 2222",
                            ShipCity = "México D.F.",
                            ShipCountry = "Mexico",
                            ShipName = "Ana Trujillo Emparedados y helados",
                            ShipPostalCode = "05021",
                            ShipVia = 1
                        },
                        new
                        {
                            Id = 10759,
                            CustomerId = "ANATR",
                            EmployeeId = 3,
                            Freight = 11.99m,
                            ShipAddress = "Avda. de la Constitución 2222",
                            ShipCity = "México D.F.",
                            ShipCountry = "Mexico",
                            ShipName = "Ana Trujillo Emparedados y helados",
                            ShipPostalCode = "05021",
                            ShipVia = 3
                        },
                        new
                        {
                            Id = 10365,
                            CustomerId = "ANTON",
                            EmployeeId = 3,
                            Freight = 22.00m,
                            ShipAddress = "Mataderos  2312",
                            ShipCity = "México D.F.",
                            ShipCountry = "Mexico",
                            ShipName = "Antonio Moreno Taquería",
                            ShipPostalCode = "05023",
                            ShipVia = 2
                        },
                        new
                        {
                            Id = 10677,
                            CustomerId = "ANTON",
                            EmployeeId = 1,
                            Freight = 4.03m,
                            ShipAddress = "Mataderos  2312",
                            ShipCity = "México D.F.",
                            ShipCountry = "Mexico",
                            ShipName = "Antonio Moreno Taquería",
                            ShipPostalCode = "05023",
                            ShipVia = 3
                        },
                        new
                        {
                            Id = 10682,
                            CustomerId = "ANTON",
                            EmployeeId = 3,
                            Freight = 36.13m,
                            ShipAddress = "Mataderos  2312",
                            ShipCity = "México D.F.",
                            ShipCountry = "Mexico",
                            ShipName = "Antonio Moreno Taquería",
                            ShipPostalCode = "05023",
                            ShipVia = 2
                        },
                        new
                        {
                            Id = 10856,
                            CustomerId = "ANTON",
                            EmployeeId = 3,
                            Freight = 58.43m,
                            ShipAddress = "Mataderos  2312",
                            ShipCity = "México D.F.",
                            ShipCountry = "Mexico",
                            ShipName = "Antonio Moreno Taquería",
                            ShipPostalCode = "05023",
                            ShipVia = 2
                        });
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.OrderDetails", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID")
                        .HasColumnType("int");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<short>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("PK_Order_Details");

                    b.HasIndex("OrderId")
                        .HasName("OrdersOrder_Details");

                    b.HasIndex("ProductId")
                        .HasName("ProductsOrder_Details");

                    b.ToTable("Order Details");

                    b.HasData(
                        new
                        {
                            OrderId = 10835,
                            ProductId = 1,
                            Discount = 0f,
                            Quantity = (short)15,
                            UnitPrice = 55m
                        },
                        new
                        {
                            OrderId = 10835,
                            ProductId = 2,
                            Discount = 0f,
                            Quantity = (short)2,
                            UnitPrice = 13m
                        },
                        new
                        {
                            OrderId = 10952,
                            ProductId = 6,
                            Discount = 0f,
                            Quantity = (short)16,
                            UnitPrice = 25m
                        },
                        new
                        {
                            OrderId = 10952,
                            ProductId = 7,
                            Discount = 0f,
                            Quantity = (short)2,
                            UnitPrice = 45.60m
                        },
                        new
                        {
                            OrderId = 11011,
                            ProductId = 8,
                            Discount = 0.05f,
                            Quantity = (short)40,
                            UnitPrice = 11.25m
                        },
                        new
                        {
                            OrderId = 11011,
                            ProductId = 3,
                            Discount = 0f,
                            Quantity = (short)20,
                            UnitPrice = 21.50m
                        },
                        new
                        {
                            OrderId = 10625,
                            ProductId = 1,
                            Discount = 0f,
                            Quantity = (short)3,
                            UnitPrice = 23.25m
                        },
                        new
                        {
                            OrderId = 10625,
                            ProductId = 2,
                            Discount = 0f,
                            Quantity = (short)5,
                            UnitPrice = 14m
                        },
                        new
                        {
                            OrderId = 10625,
                            ProductId = 5,
                            Discount = 0f,
                            Quantity = (short)10,
                            UnitPrice = 4m
                        },
                        new
                        {
                            OrderId = 10759,
                            ProductId = 2,
                            Discount = 0f,
                            Quantity = (short)10,
                            UnitPrice = 32m
                        },
                        new
                        {
                            OrderId = 10365,
                            ProductId = 7,
                            Discount = 0f,
                            Quantity = (short)24,
                            UnitPrice = 16.80m
                        },
                        new
                        {
                            OrderId = 10677,
                            ProductId = 6,
                            Discount = 0.15f,
                            Quantity = (short)30,
                            UnitPrice = 31.23m
                        },
                        new
                        {
                            OrderId = 10677,
                            ProductId = 8,
                            Discount = 0.15f,
                            Quantity = (short)8,
                            UnitPrice = 2.50m
                        },
                        new
                        {
                            OrderId = 10682,
                            ProductId = 3,
                            Discount = 0f,
                            Quantity = (short)40,
                            UnitPrice = 2.50m
                        },
                        new
                        {
                            OrderId = 10856,
                            ProductId = 2,
                            Discount = 0f,
                            Quantity = (short)20,
                            UnitPrice = 19m
                        },
                        new
                        {
                            OrderId = 10856,
                            ProductId = 4,
                            Discount = 0f,
                            Quantity = (short)20,
                            UnitPrice = 14m
                        });
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnName("CategoryID")
                        .HasColumnType("int");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("QuantityPerUnit")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<short?>("ReorderLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("UnitsInStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<short?>("UnitsOnOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasName("CategoryID");

                    b.HasIndex("ProductName")
                        .HasName("ProductName");

                    b.HasIndex("SupplierId")
                        .HasName("SuppliersProducts");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Discontinued = false,
                            ProductName = "Chai",
                            QuantityPerUnit = "10 boxes x 20 bags",
                            ReorderLevel = (short)10,
                            SupplierId = 1,
                            UnitPrice = 18m,
                            UnitsInStock = (short)39,
                            UnitsOnOrder = (short)0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Discontinued = false,
                            ProductName = "Chang",
                            QuantityPerUnit = "24 - 12 oz bottles",
                            ReorderLevel = (short)25,
                            SupplierId = 1,
                            UnitPrice = 19m,
                            UnitsInStock = (short)17,
                            UnitsOnOrder = (short)40
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Discontinued = false,
                            ProductName = "Aniseed Syrup",
                            QuantityPerUnit = "",
                            ReorderLevel = (short)25,
                            SupplierId = 1,
                            UnitPrice = 10m,
                            UnitsInStock = (short)13,
                            UnitsOnOrder = (short)70
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Discontinued = false,
                            ProductName = "Chef Anton's Cajun Seasoning",
                            QuantityPerUnit = "48 - 6 oz jars",
                            ReorderLevel = (short)0,
                            SupplierId = 2,
                            UnitPrice = 22m,
                            UnitsInStock = (short)53,
                            UnitsOnOrder = (short)0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Discontinued = true,
                            ProductName = "Chef Anton's Gumbo Mix",
                            QuantityPerUnit = "36 boxes",
                            ReorderLevel = (short)0,
                            SupplierId = 2,
                            UnitPrice = 21.35m,
                            UnitsInStock = (short)0,
                            UnitsOnOrder = (short)0
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Discontinued = false,
                            ProductName = "Northwoods Cranberry Sauce",
                            QuantityPerUnit = "12 - 12 oz jars",
                            ReorderLevel = (short)0,
                            SupplierId = 3,
                            UnitPrice = 40m,
                            UnitsInStock = (short)6,
                            UnitsOnOrder = (short)0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Discontinued = false,
                            ProductName = "Louisiana Fiery Hot Pepper Sauce",
                            QuantityPerUnit = "32 - 8 oz bottles",
                            ReorderLevel = (short)0,
                            SupplierId = 2,
                            UnitPrice = 21.05m,
                            UnitsInStock = (short)76,
                            UnitsOnOrder = (short)0
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Discontinued = false,
                            ProductName = "Louisiana Hot Spiced Okra",
                            QuantityPerUnit = "24 - 8 oz jars",
                            ReorderLevel = (short)20,
                            SupplierId = 2,
                            UnitPrice = 17m,
                            UnitsInStock = (short)4,
                            UnitsOnOrder = (short)100
                        });
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("RegionID")
                        .HasColumnType("int");

                    b.Property<string>("RegionDescription")
                        .IsRequired()
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Region");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RegionDescription = "Eastern"
                        },
                        new
                        {
                            Id = 2,
                            RegionDescription = "Western"
                        },
                        new
                        {
                            Id = 3,
                            RegionDescription = "Northern"
                        },
                        new
                        {
                            Id = 4,
                            RegionDescription = "Southern"
                        });
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.Shipper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShipperID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(24)")
                        .HasMaxLength(24);

                    b.HasKey("Id");

                    b.ToTable("Shippers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "Speedy Express",
                            Phone = "(503) 555-9831"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "United Package",
                            Phone = "(503) 555-3199"
                        },
                        new
                        {
                            Id = 3,
                            CompanyName = "Federal Shipping",
                            Phone = "(503) 555-9931"
                        });
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ContactTitle")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(24)")
                        .HasMaxLength(24);

                    b.Property<string>("HomePage")
                        .HasColumnType("ntext");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(24)")
                        .HasMaxLength(24);

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .HasName("CompanyName");

                    b.HasIndex("PostalCode")
                        .HasName("PostalCode");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "49 Gilbert St.",
                            City = "London",
                            CompanyName = "Exotic Liquids",
                            ContactName = "Charlotte Cooper",
                            ContactTitle = "Purchasing Manager",
                            Country = "UK",
                            Phone = "(171) 555-2222",
                            PostalCode = "EC1 4SD"
                        },
                        new
                        {
                            Id = 2,
                            Address = "P.O. Box 78934",
                            City = "New Orleans",
                            CompanyName = "New Orleans Cajun Delights",
                            ContactName = "Shelley Burke",
                            ContactTitle = "Order Administrator",
                            Country = "USA",
                            HomePage = "#CAJUN.HTM#",
                            Phone = "(100) 555-4822",
                            PostalCode = "70117",
                            Region = "LA"
                        },
                        new
                        {
                            Id = 3,
                            Address = "707 Oxford Rd.",
                            City = "Ann Arbor",
                            CompanyName = "Grandma Kelly's Homestead",
                            ContactName = "Regina Murphy",
                            ContactTitle = "Sales Representative",
                            Country = "USA",
                            Fax = "(313) 555-3349",
                            Phone = "(313) 555-5735",
                            PostalCode = "48104",
                            Region = "MI"
                        },
                        new
                        {
                            Id = 4,
                            Address = "9-8 Sekimai Musashino-shi",
                            City = "Tokyo",
                            CompanyName = "Tokyo Traders",
                            ContactName = "Yoshi Nagase",
                            ContactTitle = "Marketing Manager",
                            Country = "Japan",
                            Phone = "(03) 3555-5011",
                            PostalCode = "100"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Calle del Rosal 4",
                            City = "Oviedo",
                            CompanyName = "Cooperativa de Quesos 'Las Cabras'",
                            ContactName = "Antonio del Valle Saavedra",
                            ContactTitle = "Export Administrator",
                            Country = "Spain",
                            Phone = "(98) 598 76 54",
                            PostalCode = "33007",
                            Region = "Asturias"
                        });
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.Territory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("TerritoryID")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("RegionId")
                        .HasColumnName("RegionID")
                        .HasColumnType("int");

                    b.Property<string>("TerritoryDescription")
                        .IsRequired()
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RegionId");

                    b.ToTable("Territories");

                    b.HasData(
                        new
                        {
                            Id = "20852",
                            RegionId = 1,
                            TerritoryDescription = "Rockville"
                        },
                        new
                        {
                            Id = "27403",
                            RegionId = 1,
                            TerritoryDescription = "Greensboro"
                        },
                        new
                        {
                            Id = "27511",
                            RegionId = 1,
                            TerritoryDescription = "Cary"
                        },
                        new
                        {
                            Id = "29202",
                            RegionId = 4,
                            TerritoryDescription = "Columbia"
                        },
                        new
                        {
                            Id = "30346",
                            RegionId = 4,
                            TerritoryDescription = "Atlanta"
                        },
                        new
                        {
                            Id = "31406",
                            RegionId = 4,
                            TerritoryDescription = "Savannah"
                        },
                        new
                        {
                            Id = "32859",
                            RegionId = 4,
                            TerritoryDescription = "Orlando"
                        },
                        new
                        {
                            Id = "33607",
                            RegionId = 4,
                            TerritoryDescription = "Tampa"
                        },
                        new
                        {
                            Id = "40222",
                            RegionId = 1,
                            TerritoryDescription = "Louisville"
                        },
                        new
                        {
                            Id = "44122",
                            RegionId = 3,
                            TerritoryDescription = "Beachwood"
                        },
                        new
                        {
                            Id = "45839",
                            RegionId = 3,
                            TerritoryDescription = "Findlay"
                        },
                        new
                        {
                            Id = "48075",
                            RegionId = 3,
                            TerritoryDescription = "Southfield"
                        },
                        new
                        {
                            Id = "48084",
                            RegionId = 3,
                            TerritoryDescription = "Troy"
                        },
                        new
                        {
                            Id = "48304",
                            RegionId = 3,
                            TerritoryDescription = "Bloomfield Hills"
                        },
                        new
                        {
                            Id = "53404",
                            RegionId = 3,
                            TerritoryDescription = "Racine"
                        },
                        new
                        {
                            Id = "55113",
                            RegionId = 3,
                            TerritoryDescription = "Roseville"
                        },
                        new
                        {
                            Id = "55439",
                            RegionId = 3,
                            TerritoryDescription = "Minneapolis"
                        });
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.CreditCard", b =>
                {
                    b.HasOne("Northwind.EF.DAL.Entities.Employee", "Employee")
                        .WithOne("CreditCard")
                        .HasForeignKey("Northwind.EF.DAL.Entities.CreditCard", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.CustomerCustomerDemo", b =>
                {
                    b.HasOne("Northwind.EF.DAL.Entities.Customer", "Customer")
                        .WithMany("CustomerCustomerDemo")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerCustomerDemo_Customers")
                        .IsRequired();

                    b.HasOne("Northwind.EF.DAL.Entities.CustomerDemographics", "CustomerType")
                        .WithMany("CustomerCustomerDemo")
                        .HasForeignKey("CustomerTypeId")
                        .HasConstraintName("FK_CustomerCustomerDemo")
                        .IsRequired();
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.Employee", b =>
                {
                    b.HasOne("Northwind.EF.DAL.Entities.Employee", "ReportsToNavigation")
                        .WithMany("InverseReportsToNavigation")
                        .HasForeignKey("ReportsTo")
                        .HasConstraintName("FK_Employees_Employees");
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.EmployeeTerritory", b =>
                {
                    b.HasOne("Northwind.EF.DAL.Entities.Employee", "Employee")
                        .WithMany("EmployeeTerritories")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeTerritories_Employees")
                        .IsRequired();

                    b.HasOne("Northwind.EF.DAL.Entities.Territory", "Territory")
                        .WithMany("EmployeeTerritories")
                        .HasForeignKey("TerritoryId")
                        .HasConstraintName("FK_EmployeeTerritories_Territories")
                        .IsRequired();
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.Order", b =>
                {
                    b.HasOne("Northwind.EF.DAL.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Orders_Customers");

                    b.HasOne("Northwind.EF.DAL.Entities.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Orders_Employees");

                    b.HasOne("Northwind.EF.DAL.Entities.Shipper", "ShipViaNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("ShipVia")
                        .HasConstraintName("FK_Orders_Shippers");
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.OrderDetails", b =>
                {
                    b.HasOne("Northwind.EF.DAL.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Order_Details_Orders")
                        .IsRequired();

                    b.HasOne("Northwind.EF.DAL.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Order_Details_Products")
                        .IsRequired();
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.Product", b =>
                {
                    b.HasOne("Northwind.EF.DAL.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Products_Categories");

                    b.HasOne("Northwind.EF.DAL.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Products_Suppliers");
                });

            modelBuilder.Entity("Northwind.EF.DAL.Entities.Territory", b =>
                {
                    b.HasOne("Northwind.EF.DAL.Entities.Region", "Region")
                        .WithMany("Territories")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Territories_Region")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
